from telebot import types
from datetime import datetime
from database import save_profile_to_db
from utils.formatters import format_profile
from config import DOTA_ROLES, VALORANT_RANKS, VALORANT_SUBRANKS

def ask_game(bot, message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_cs = types.KeyboardButton("CS2")
    btn_dota = types.KeyboardButton("Dota 2")
    btn_valorant = types.KeyboardButton("Valorant")
    markup.add(btn_cs, btn_dota, btn_valorant)
    
    msg = bot.send_message(message.chat.id, "üéÆ –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:", reply_markup=markup)
    bot.register_next_step_handler(msg, ask_rank, bot)

def ask_rank(message, bot):
    game = message.text
    if game not in ["CS2", "Dota 2", "Valorant"]:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        bot.register_next_step_handler(msg, ask_rank, bot)
        return
    
    user_data = {'game': game}
    
    if game == "Dota 2":
        msg = bot.send_message(
            message.chat.id, 
            "üèÜ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à MMR (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 17000):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, process_dota_mmr, bot, user_data)
    elif game == "CS2":
        msg = bot.send_message(
            message.chat.id,
            "üèÜ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Faceit ELO (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5000):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, process_faceit_elo, bot, user_data)
    else:  # Valorant
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i in range(0, len(VALORANT_RANKS), 3):
            markup.add(*VALORANT_RANKS[i:i+3])
        msg = bot.send_message(message.chat.id, "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–Ω–≥:", reply_markup=markup)
        bot.register_next_step_handler(msg, process_valorant_rank, bot, user_data)

def process_dota_mmr(message, bot, user_data):
    try:
        mmr = int(message.text)
        if not 1 <= mmr <= 17000:
            raise ValueError
        user_data['rank'] = f"{mmr} MMR"
        ask_dota_roles(bot, message, user_data)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MMR. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10000.")
        bot.register_next_step_handler(msg, process_dota_mmr, bot, user_data)

def process_faceit_elo(message, bot, user_data):
    try:
        elo = int(message.text)
        if not 1 <= elo <= 5000:
            raise ValueError
        user_data['rank'] = f"{elo} ELO"
        ask_description(bot, message, user_data)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ELO. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3000.")
        bot.register_next_step_handler(msg, process_faceit_elo, bot, user_data)

def process_valorant_rank(message, bot, user_data):
    if message.text not in VALORANT_RANKS:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        bot.register_next_step_handler(msg, process_valorant_rank, bot, user_data)
        return
    
    user_data['rank_group'] = message.text
    
    if message.text in VALORANT_SUBRANKS:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        markup.add(*VALORANT_SUBRANKS[message.text])
        
        msg = bot.send_message(
            message.chat.id,
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text}. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–¥—Ä–∞–Ω–≥:",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_valorant_subrank, bot, user_data)
    else:
        user_data['rank'] = message.text
        ask_description(bot, message, user_data)

def process_valorant_subrank(message, bot, user_data):
    rank_group = user_data['rank_group']
    
    if message.text not in VALORANT_SUBRANKS.get(rank_group, []):
        msg = bot.send_message(
            message.chat.id,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–Ω–≥ {rank_group} –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        bot.register_next_step_handler(msg, process_valorant_subrank, bot, user_data)
        return
    
    user_data['rank'] = f"{rank_group} {message.text}"
    ask_description(bot, message, user_data)

def ask_dota_roles(bot, message, user_data):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(*DOTA_ROLES)
    markup.add(types.KeyboardButton("–ì–æ—Ç–æ–≤–æ"))
    user_data['roles'] = []
    
    msg = bot.send_message(
        message.chat.id,
        "üõ°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Ä–æ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'):",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_dota_roles, bot, user_data)

def process_dota_roles(message, bot, user_data):
    if message.text == "–ì–æ—Ç–æ–≤–æ":
        if not user_data['roles']:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            bot.register_next_step_handler(msg, process_dota_roles, bot, user_data)
            return
        ask_description(bot, message, user_data)
    elif message.text in DOTA_ROLES:
        if message.text not in user_data['roles']:
            user_data['roles'].append(message.text)
        msg = bot.send_message(
            message.chat.id,
            f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(user_data['roles'])}\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(*DOTA_ROLES, "–ì–æ—Ç–æ–≤–æ")
        )
        bot.register_next_step_handler(msg, process_dota_roles, bot, user_data)
    else:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ä–æ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        bot.register_next_step_handler(msg, process_dota_roles, bot, user_data)

def ask_description(bot, message, user_data):
    if 'roles' not in user_data:
        user_data['roles'] = ['Any']
    
    msg = bot.send_message(
        message.chat.id,
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ò–≥—Ä–∞—é –≤–µ—á–µ—Ä–æ–º\n"
        "‚Ä¢ –ò—â—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤\n"
        "‚Ä¢ –ï—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω",
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, finish_form, bot, user_data)

def finish_form(message, bot, user_data):
    profile_data = {
        'first_name': message.from_user.first_name,
        'username': message.from_user.username,
        'game': user_data['game'],
        'rank': user_data['rank'],
        'roles': user_data.get('roles', ['Any']),
        'description': message.text[:1000] if message.text else "",
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M")
    }
    
    if save_profile_to_db(message.from_user.id, profile_data, bot):
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n{format_profile(profile_data)}",
            parse_mode="Markdown"
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã")

def setup_form_handlers(bot):
    @bot.message_handler(func=lambda m: m.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
    def handle_fill_form(message):
        ask_game(bot, message)